{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajpa\\\\Downloads\\\\mainproject-main\\\\mainproject-main\\\\Mernauthentication\\\\loginregreactjsmui1\\\\src\\\\pages\\\\auth\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, TextField, Button, Box, Alert } from \"@mui/material\";\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useResetPasswordMutation } from \"../../services/userAuthApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ResetPassword = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [error, setError] = useState({\n    status: false,\n    msg: \"\",\n    type: \"\"\n  });\n  const [resetPassword, {}] = useResetPasswordMutation();\n  const {\n    id,\n    token\n  } = useParams();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const actualData = {\n      password: data.get('password'),\n      password_confirmation: data.get('password_confirmation')\n    };\n\n    if (actualData.password && actualData.password_confirmation) {\n      if (actualData.password === actualData.password_confirmation) {\n        const res = await resetPassword({\n          actualData,\n          id,\n          token\n        });\n        console.log(res);\n\n        if (res.data.status === \"success\") {\n          document.getElementById('password-reset-form').reset();\n          setError({\n            status: true,\n            msg: \"Password Reset Successfully. Redirecting to Login Page...\",\n            type: 'success'\n          });\n          setTimeout(() => {\n            navigate(\"/login\");\n          }, 3000);\n        }\n\n        if (res.data.status === \"failed\") {\n          setError({\n            status: true,\n            msg: res.data.message,\n            type: 'error'\n          });\n        }\n      } else {\n        setError({\n          status: true,\n          msg: \"Password and Confirm Password Doesn't Match\",\n          type: 'error'\n        });\n      }\n    } else {\n      setError({\n        status: true,\n        msg: \"All Fields are Required\",\n        type: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          sx: {\n            mt: 1\n          },\n          id: \"password-reset-form\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"password\",\n            name: \"password\",\n            label: \"New Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"password_confirmation\",\n            name: \"password_confirmation\",\n            label: \"Confirm New Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              sx: {\n                mt: 3,\n                mb: 2,\n                px: 5\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), error.status ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: error.type,\n            children: error.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 27\n          }, this) : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(ResetPassword, \"zr+zSDppBQ85hxuEb1E3BKYEBo8=\", false, function () {\n  return [useNavigate, useResetPasswordMutation, useParams];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["C:/Users/rajpa/Downloads/mainproject-main/mainproject-main/Mernauthentication/loginregreactjsmui1/src/pages/auth/ResetPassword.js"],"names":["Grid","TextField","Button","Box","Alert","useState","useNavigate","useParams","useResetPasswordMutation","ResetPassword","navigate","error","setError","status","msg","type","resetPassword","id","token","handleSubmit","e","preventDefault","data","FormData","currentTarget","actualData","password","get","password_confirmation","res","console","log","document","getElementById","reset","setTimeout","message","mt","mb","px"],"mappings":"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","sourcesContent":["import { Grid, TextField, Button, Box, Alert } from \"@mui/material\";\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useResetPasswordMutation } from \"../../services/userAuthApi\";\n\n\nconst ResetPassword = () => {\n  const navigate = useNavigate()\n  const [error, setError] = useState({\n    status: false,\n    msg: \"\",\n    type: \"\"\n  })\n  const [resetPassword, { }] = useResetPasswordMutation()\n  const { id, token } = useParams()\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const actualData = {\n      password: data.get('password'),\n      password_confirmation: data.get('password_confirmation'),\n    }\n    if (actualData.password && actualData.password_confirmation) {\n      if (actualData.password === actualData.password_confirmation) {\n        const res = await resetPassword({ actualData, id, token })\n        console.log(res)\n        if (res.data.status === \"success\") {\n          document.getElementById('password-reset-form').reset()\n          setError({ status: true, msg: \"Password Reset Successfully. Redirecting to Login Page...\", type: 'success' })\n          setTimeout(() => {\n            navigate(\"/login\")\n          }, 3000)\n        }\n        if (res.data.status === \"failed\") {\n          setError({ status: true, msg: res.data.message, type: 'error' })\n        }\n      } else {\n        setError({ status: true, msg: \"Password and Confirm Password Doesn't Match\", type: 'error' })\n      }\n    } else {\n      setError({ status: true, msg: \"All Fields are Required\", type: 'error' })\n    }\n  }\n  return <>\n    <Grid container justifyContent='center'>\n      <Grid item sm={6} xs={12}>\n        <h1>Reset Password</h1>\n        <Box component='form' noValidate sx={{ mt: 1 }} id='password-reset-form' onSubmit={handleSubmit}>\n          <TextField margin='normal' required fullWidth id='password' name='password' label='New Password' type='password' />\n          <TextField margin='normal' required fullWidth id='password_confirmation' name='password_confirmation' label='Confirm New Password' type='password' />\n          <Box textAlign='center'>\n            <Button type='submit' variant='contained' sx={{ mt: 3, mb: 2, px: 5 }}>Save</Button>\n          </Box>\n          {error.status ? <Alert severity={error.type}>{error.msg}</Alert> : ''}\n        </Box>\n      </Grid>\n    </Grid>\n  </>;\n};\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}